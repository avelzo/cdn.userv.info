"use client";

import { useState, useRef, useEffect } from "react";

interface FileItem {
  id: string;
  name: string;
  type: "file" | "folder";
  size?: number;
  lastModified?: Date;
  mimeType?: string;
  url?: string;
}

interface FolderItem {
  id: string;
  name: string;
  slug: string;
  path: string;
  parentId?: string;
  isRoot: boolean;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
}

export default function MediaManager() {
  const [selectedFolder, setSelectedFolder] = useState<string>("root");
  const [selectedFile, setSelectedFile] = useState<FileItem | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [folders, setFolders] = useState<FolderItem[]>([]);
  const [files, setFiles] = useState<FileItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // ID utilisateur de test - en production, cela viendrait de l'authentification
  const TEST_USER_ID = "68f6914dfac6d73b4751e944";

  useEffect(() => {
    loadFolders();
  }, []);

  useEffect(() => {
    if (selectedFolder && selectedFolder !== 'root') {
      loadFolderContents(selectedFolder);
    } else {
      setFiles([]);
    }
  }, [selectedFolder]);

  const loadFolders = async () => {
    try {
      setLoading(true);
      console.log('Chargement des dossiers pour userId:', TEST_USER_ID);
      
      const response = await fetch(`/api/folders?userId=${TEST_USER_ID}`);
      console.log('Status de la r√©ponse:', response.status);
      
      const data = await response.json();
      console.log('Donn√©es re√ßues:', data);
      
      if (data.success && data.data.folders) {
        setFolders(data.data.folders);
        console.log('Dossiers charg√©s:', data.data.folders.length);
        
        // S√©lectionner le dossier racine par d√©faut
        const rootFolder = data.data.folders.find((f: FolderItem) => f.isRoot);
        if (rootFolder) {
          setSelectedFolder(rootFolder.id);
        }
      } else {
        console.error('Erreur lors du chargement des dossiers:', data.error);
      }
    } catch (error) {
      console.error('Erreur r√©seau:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadFolderContents = async (folderId: string) => {
    try {
      const response = await fetch(`/api/files?folderId=${folderId}&userId=${TEST_USER_ID}`);
      const data = await response.json();
      
      if (data.success) {
        setFiles(data.data.files.map((file: any) => ({
          id: file.id,
          name: file.originalName,
          type: 'file' as const,
          size: file.size,
          lastModified: new Date(file.createdAt),
          mimeType: file.mimeType,
          url: file.url
        })));
      } else {
        console.error('Erreur lors du chargement des fichiers:', data.error);
      }
    } catch (error) {
      console.error('Erreur r√©seau lors du chargement des fichiers:', error);
    }
  };

  const uploadFile = async (file: File) => {
    try {
      setUploading(true);
      
      const formData = new FormData();
      formData.append('file', file);
      formData.append('folderId', selectedFolder);
      formData.append('userId', TEST_USER_ID);
      formData.append('isPublic', 'false');

      const response = await fetch('/api/files/upload', {
        method: 'POST',
        body: formData
      });

      const data = await response.json();
      
      if (data.success) {
        console.log('Fichier upload√© avec succ√®s:', data.data);
        // Recharger les fichiers du dossier
        await loadFolderContents(selectedFolder);
      } else {
        console.error('Erreur lors de l\'upload:', data.error);
        alert('Erreur lors de l\'upload: ' + data.error);
      }
    } catch (error) {
      console.error('Erreur r√©seau lors de l\'upload:', error);
      alert('Erreur r√©seau lors de l\'upload');
    } finally {
      setUploading(false);
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const uploadFiles = event.target.files;
    if (uploadFiles && uploadFiles.length > 0) {
      Array.from(uploadFiles).forEach(file => {
        uploadFile(file);
      });
    }
    // Reset l'input
    if (event.target) {
      event.target.value = '';
    }
  };

  const handleDrop = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(false);
    
    const uploadFiles = event.dataTransfer.files;
    if (uploadFiles && uploadFiles.length > 0) {
      Array.from(uploadFiles).forEach(file => {
        uploadFile(file);
      });
    }
  };

  const handleDragOver = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(false);
  };

  const formatFileSize = (bytes: number) => {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;
    
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    
    return `${size.toFixed(1)} ${units[unitIndex]}`;
  };

  const getFileIcon = (mimeType?: string) => {
    if (!mimeType) return "üìÑ";
    if (mimeType.startsWith("image/")) return "üñºÔ∏è";
    if (mimeType.startsWith("video/")) return "üé•";
    if (mimeType.startsWith("audio/")) return "üéµ";
    if (mimeType.includes("pdf")) return "üìã";
    return "üìÑ";
  };

  const getCurrentFolderName = () => {
    const currentFolder = folders.find(f => f.id === selectedFolder);
    return currentFolder?.name || 'Dossier';
  };

  const renderFolderTree = (folderId: string, level: number = 0) => {
    const folder = folders.find(f => f.id === folderId);
    if (!folder) return null;

    const children = folders.filter(f => f.parentId === folder.id);

    return (
      <div key={folder.id}>
        <div
          className={`flex items-center gap-2 px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg ${
            selectedFolder === folder.id ? "bg-blue-100 dark:bg-blue-900" : ""
          }`}
          style={{ paddingLeft: `${12 + level * 20}px` }}
          onClick={() => setSelectedFolder(folder.id)}
        >
          <span className="text-yellow-600">üìÅ</span>
          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
            {folder.name}
          </span>
        </div>
        {children.map(child => renderFolderTree(child.id, level + 1))}
      </div>
    );
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const uploadFiles = event.target.files;
    if (uploadFiles) {
      Array.from(uploadFiles).forEach(file => {
        console.log("Uploading file:", file.name);
        // Ici on impl√©mentrait l'upload r√©el
      });
    }
  };

  const handleDrop = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(false);
    
    const uploadFiles = event.dataTransfer.files;
    if (uploadFiles) {
      Array.from(uploadFiles).forEach(file => {
        console.log("Dropped file:", file.name);
        // Ici on impl√©mentrait l'upload r√©el
      });
    }
  };

  const handleDragOver = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (event: React.DragEvent) => {
    event.preventDefault();
    setIsDragOver(false);
  };

  const formatFileSize = (bytes: number) => {
    const units = ['B', 'KB', 'MB', 'GB'];
    let size = bytes;
    let unitIndex = 0;
    
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    
    return `${size.toFixed(1)} ${units[unitIndex]}`;
  };

  const getFileIcon = (mimeType?: string) => {
    if (!mimeType) return "üìÑ";
    if (mimeType.startsWith("image/")) return "üñºÔ∏è";
    if (mimeType.startsWith("video/")) return "üé•";
    if (mimeType.startsWith("audio/")) return "üéµ";
    if (mimeType.includes("pdf")) return "üìã";
    return "üìÑ";
  };

  const getCurrentFolderName = () => {
    const currentFolder = folders.find(f => f.id === selectedFolder);
    return currentFolder?.name || 'Dossier';
  };

  if (loading) {
    return (
      <div className="h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Chargement des dossiers...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen bg-gray-50 dark:bg-gray-900 flex flex-col">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-xl font-bold text-gray-900 dark:text-white">
              Gestionnaire de M√©dias
            </h1>
            <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
              <span>üìÅ</span>
              <span>/</span>
              <span>{getCurrentFolderName()}</span>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            <button
              onClick={() => fileInputRef.current?.click()}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors duration-200 flex items-center gap-2"
            >
              <span>‚¨ÜÔ∏è</span>
              Uploader
            </button>
            <button className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg transition-colors duration-200 flex items-center gap-2">
              <span>üìÅ</span>
              Nouveau dossier
            </button>
            <button className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg transition-colors duration-200">
              ‚öôÔ∏è
            </button>
          </div>
        </div>
      </header>

      <div className="flex-1 flex">
        {/* Sidebar - Arborescence des dossiers */}
        <div className="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto">
          <div className="p-4">
            <h2 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-3">
              Dossiers
            </h2>
            {folders.filter(f => f.isRoot).map(rootFolder => renderFolderTree(rootFolder.id))}
          </div>
        </div>

        {/* Main Content - Liste des fichiers */}
        <div 
          className={`flex-1 p-6 overflow-y-auto ${isDragOver ? "bg-blue-50 dark:bg-blue-900/20" : ""}`}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragLeave={handleDragLeave}
        >
          {isDragOver && (
            <div className="border-2 border-dashed border-blue-400 rounded-lg p-8 text-center text-blue-600 dark:text-blue-400 mb-6">
              <div className="text-4xl mb-2">üì§</div>
              <p className="text-lg font-medium">D√©posez vos fichiers ici</p>
            </div>
          )}

          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
            {files.map((file) => (
              <div
                key={file.id}
                className={`bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 cursor-pointer hover:shadow-md transition-all duration-200 ${
                  selectedFile?.id === file.id ? "ring-2 ring-blue-500" : ""
                }`}
                onClick={() => setSelectedFile(file)}
              >
                <div className="text-center">
                  <div className="text-3xl mb-2">{getFileIcon(file.mimeType)}</div>
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white truncate" title={file.name}>
                    {file.name}
                  </h3>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    {file.size ? formatFileSize(file.size) : ""}
                  </p>
                </div>
              </div>
            ))}
          </div>

          {files.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üìÅ</div>
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                Aucun fichier dans ce dossier
              </h3>
              <p className="text-gray-500 dark:text-gray-400">
                Glissez-d√©posez des fichiers ici ou utilisez le bouton "Uploader"
              </p>
            </div>
          )}
        </div>

        {/* Right Panel - D√©tails du fichier */}
        {selectedFile && (
          <div className="w-80 bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                  D√©tails du fichier
                </h2>
                <button
                  onClick={() => setSelectedFile(null)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>

              <div className="space-y-6">
                {/* Aper√ßu */}
                <div className="text-center">
                  <div className="text-6xl mb-3">{getFileIcon(selectedFile.mimeType)}</div>
                  <h3 className="font-medium text-gray-900 dark:text-white break-words">
                    {selectedFile.name}
                  </h3>
                </div>

                {/* Informations */}
                <div className="space-y-3">
                  <div>
                    <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                      Type
                    </label>
                    <p className="text-sm text-gray-900 dark:text-white">
                      {selectedFile.mimeType || "Inconnu"}
                    </p>
                  </div>
                  
                  {selectedFile.size && (
                    <div>
                      <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                        Taille
                      </label>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {formatFileSize(selectedFile.size)}
                      </p>
                    </div>
                  )}
                  
                  {selectedFile.lastModified && (
                    <div>
                      <label className="text-sm font-medium text-gray-500 dark:text-gray-400">
                        Derni√®re modification
                      </label>
                      <p className="text-sm text-gray-900 dark:text-white">
                        {selectedFile.lastModified.toLocaleDateString()}
                      </p>
                    </div>
                  )}
                </div>

                {/* Actions */}
                <div className="space-y-2">
                  <button className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                    T√©l√©charger
                  </button>
                  <button className="w-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 py-2 px-4 rounded-lg transition-colors duration-200">
                    Copier le lien
                  </button>
                  <button className="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition-colors duration-200">
                    Supprimer
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Input cach√© pour l'upload */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        className="hidden"
        onChange={handleFileUpload}
      />
    </div>
  );
}